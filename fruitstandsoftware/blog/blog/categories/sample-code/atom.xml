<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sample Code | Core Fruition]]></title>
  <link href="https://mrrooni.com/fruitstandsoftware/blog/categories/sample-code/atom.xml" rel="self"/>
  <link href="https://mrrooni.com/fruitstandsoftware/"/>
  <updated>2014-06-10T09:28:16-04:00</updated>
  <id>https://mrrooni.com/fruitstandsoftware/</id>
  <author>
    <name><![CDATA[Michael Fey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UITableView and NSFetchedResultsController: Updates Done Right]]></title>
    <link href="https://mrrooni.com/fruitstandsoftware/blog/2013/02/19/uitableview-and-nsfetchedresultscontroller-updates-done-right/"/>
    <updated>2013-02-19T13:56:05-05:00</updated>
    <id>https://mrrooni.com/fruitstandsoftware/blog/2013/02/19/uitableview-and-nsfetchedresultscontroller-updates-done-right</id>
    <content type="html"><![CDATA[<p>While working on <a href="http://nothirst.com/moneywellexpress/">MoneyWell Express</a> 1.0 I decided to finally sit down and figure out a bug that had plagued me for a long time: Periodic and seemingly random crashes when updating MoneyWell&rsquo;s transaction UITableView. If you&rsquo;ve spent any significant time with UITableView you&rsquo;ve undoubtably seen an error similar to this one:</p>

<pre><code>*** Assertion failure in -[UITableView _endCellAnimationsWithContext:], /SourceCache/UIKit_Sim/UIKit-2380.17/UITableView.m:1070
CoreData: error: Serious application error.
An exception was caught from the delegate of NSFetchedResultsController during a call to -controllerDidChangeContent:.
Invalid update: invalid number of rows in section 2.
The number of rows contained in an existing section after the update (2) must be equal to the number of rows contained in that section before the update (1),
plus or minus the number of rows inserted or deleted from that section (0 inserted, 0 deleted) and
plus or minus the number of rows moved into or out of that section (0 moved in, 0 moved out). with userInfo (null)
</code></pre>

<p>The problem with this bug for me was that it was intermittent and never reliably reproducible &ndash; until it was. One day while working on our <a href="https://github.com/nothirst/TICoreDataSync/">syncing framework</a> I had this issue start to reproduce itself every time MoneyWell Express attempted to consume some sync changes and I seized the opportunity to finally figure out what was going on.</p>

<p>Let&rsquo;s start by taking a look at the sample code Apple provides on the <a href="http://developer.apple.com/library/ios/#documentation/CoreData/Reference/NSFetchedResultsControllerDelegate_Protocol/Reference/Reference.html">NSFetchedResultsControllerDelegate Protocol Reference</a>:</p>

<p>```objective-c</p>

<pre><code>/*
   Assume self has a property 'tableView' -- as is the case for an instance of a UITableViewController
   subclass -- and a method configureCell:atIndexPath: which updates the contents of a given cell
   with information from a managed object at the given index path in the fetched results controller.
 */

- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView beginUpdates];
}

- (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id )sectionInfo
    atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type
{
    switch (type) {
        case NSFetchedResultsChangeInsert:
            [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
        case NSFetchedResultsChangeDelete:
            [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}

- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(NSIndexPath *)indexPath
          forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath *)newIndexPath
{
    UITableView *tableView = self.tableView;

    switch (type) {
        case NSFetchedResultsChangeInsert:
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
        case NSFetchedResultsChangeDelete:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;

        case NSFetchedResultsChangeUpdate:
            [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath];
            break;

        case NSFetchedResultsChangeMove:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}

- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView endUpdates];
}
</code></pre>

<p>```</p>

<p>As you can see this code starts the tableView updates in controllerWillChangeContent:, responds to each change as it happens, and then ends the tableView updates in controllerDidChangeContent:. The problem I ran into with this code is that inserting sections into the table also inserted all the rows for that new section, but since those rows were also being reported as inserted we would get twice the number of rows inserted when adding a new section to the table. The answer was to queue up all the updates that the fetchedResultsController reported and then respond to them all at once, like so:</p>

<p>```objective-c</p>

<pre><code>@interface SomeViewController ()

// Declare some collection properties to hold the various updates we might get from the NSFetchedResultsControllerDelegate
@property (nonatomic, strong) NSMutableIndexSet *deletedSectionIndexes;
@property (nonatomic, strong) NSMutableIndexSet *insertedSectionIndexes;
@property (nonatomic, strong) NSMutableArray *deletedRowIndexPaths;
@property (nonatomic, strong) NSMutableArray *insertedRowIndexPaths;
@property (nonatomic, strong) NSMutableArray *updatedRowIndexPaths;

@end

@implementation SomeViewController

#pragma mark - NSFetchedResultsControllerDelegate methods

- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(NSIndexPath *)indexPath
          forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(NSIndexPath *)newIndexPath
{
    if (type == NSFetchedResultsChangeInsert) {
        if ([self.insertedSectionIndexes containsIndex:newIndexPath.section]) {
            // If we've already been told that we're adding a section for this inserted row we skip it since it will handled by the section insertion.
            return;
        }

        [self.insertedRowIndexPaths addObject:newIndexPath];
    } else if (type == NSFetchedResultsChangeDelete) {
        if ([self.deletedSectionIndexes containsIndex:indexPath.section]) {
            // If we've already been told that we're deleting a section for this deleted row we skip it since it will handled by the section deletion.
            return;
        }

        [self.deletedRowIndexPaths addObject:indexPath];
    } else if (type == NSFetchedResultsChangeMove) {
        if ([self.insertedSectionIndexes containsIndex:newIndexPath.section] == NO) {
            [self.insertedRowIndexPaths addObject:newIndexPath];
        }

        if ([self.deletedSectionIndexes containsIndex:indexPath.section] == NO) {
            [self.deletedRowIndexPaths addObject:indexPath];
        }
    } else if (type == NSFetchedResultsChangeUpdate) {
        [self.updatedRowIndexPaths addObject:indexPath];
    }
}

- (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id )sectionInfo atIndex:(NSUInteger)sectionIndex
          forChangeType:(NSFetchedResultsChangeType)type
{
    switch (type) {
        case NSFetchedResultsChangeInsert:
            [self.insertedSectionIndexes addIndex:sectionIndex];
            break;
        case NSFetchedResultsChangeDelete:
            [self.deletedSectionIndexes addIndex:sectionIndex];
            break;
        default:
            ; // Shouldn't have a default
            break;
    }
}

- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView beginUpdates];

    [self.tableView deleteSections:self.deletedSectionIndexes withRowAnimation:UITableViewRowAnimationAutomatic];
    [self.tableView insertSections:self.insertedSectionIndexes withRowAnimation:UITableViewRowAnimationAutomatic];

    [self.tableView deleteRowsAtIndexPaths:self.deletedRowIndexPaths withRowAnimation:UITableViewRowAnimationLeft];
    [self.tableView insertRowsAtIndexPaths:self.insertedRowIndexPaths withRowAnimation:UITableViewRowAnimationRight];
    [self.tableView reloadRowsAtIndexPaths:self.updatedRowIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];

    [self.tableView endUpdates];

    // nil out the collections so they are ready for their next use.
    self.insertedSectionIndexes = nil;
    self.deletedSectionIndexes = nil;
    self.deletedRowIndexPaths = nil;
    self.insertedRowIndexPaths = nil;
    self.updatedRowIndexPaths = nil;
}

#pragma mark - Overridden getters

/**
 * Lazily instantiate these collections.
 */

- (NSMutableIndexSet *)deletedSectionIndexes
{
    if (_deletedSectionIndexes == nil) {
        _deletedSectionIndexes = [[NSMutableIndexSet alloc] init];
    }

    return _deletedSectionIndexes;
}

- (NSMutableIndexSet *)insertedSectionIndexes
{
    if (_insertedSectionIndexes == nil) {
        _insertedSectionIndexes = [[NSMutableIndexSet alloc] init];
    }

    return _insertedSectionIndexes;
}

- (NSMutableArray *)deletedRowIndexPaths
{
    if (_deletedRowIndexPaths == nil) {
        _deletedRowIndexPaths = [[NSMutableArray alloc] init];
    }

    return _deletedRowIndexPaths;
}

- (NSMutableArray *)insertedRowIndexPaths
{
    if (_insertedRowIndexPaths == nil) {
        _insertedRowIndexPaths = [[NSMutableArray alloc] init];
    }

    return _insertedRowIndexPaths;
}

- (NSMutableArray *)updatedRowIndexPaths
{
    if (_updatedRowIndexPaths == nil) {
        _updatedRowIndexPaths = [[NSMutableArray alloc] init];
    }

    return _updatedRowIndexPaths;
}

@end
</code></pre>

<p>```</p>

<p>This implementation properly queues all the changes, makes sure not to insert or delete any rows when they are part of an inserted or deleted section, and updates the table in one nice little chunk. You don&rsquo;t need to worry about implementing the willChangeContent: delegate method. It also has the benefit that, if you were so inclined, you could see how many updates you were about to perform on the tableView and just call reloadData instead, like so:</p>

<p>```objective-c</p>

<pre><code>- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    NSInteger totalChanges = [self.deletedSectionIndexes count] +
                             [self.insertedSectionIndexes count] +
                             [self.deletedRowIndexPaths count] +
                             [self.insertedRowIndexPaths count] +
                             [self.updatedRowIndexPaths count];
    if (totalChanges &gt; 50) {
        self.insertedSectionIndexes = nil;
        self.deletedSectionIndexes = nil;
        self.deletedRowIndexPaths = nil;
        self.insertedRowIndexPaths = nil;
        self.updatedRowIndexPaths = nil;

        [self.tableView reloadData];
        return;
    }

    [self.tableView beginUpdates];

    [self.tableView deleteSections:self.deletedSectionIndexes withRowAnimation:UITableViewRowAnimationAutomatic];
    [self.tableView insertSections:self.insertedSectionIndexes withRowAnimation:UITableViewRowAnimationAutomatic];

    [self.tableView deleteRowsAtIndexPaths:self.deletedRowIndexPaths withRowAnimation:UITableViewRowAnimationLeft];
    [self.tableView insertRowsAtIndexPaths:self.insertedRowIndexPaths withRowAnimation:UITableViewRowAnimationRight];
    [self.tableView reloadRowsAtIndexPaths:self.updatedRowIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];

    [self.tableView endUpdates];

    self.insertedSectionIndexes = nil;
    self.deletedSectionIndexes = nil;
    self.deletedRowIndexPaths = nil;
    self.insertedRowIndexPaths = nil;
    self.updatedRowIndexPaths = nil;
}
</code></pre>

<p>```</p>

<p>If you&rsquo;ve got any questions or if you notice some horrible bug that I&rsquo;ve introduced let me know on <a href="http://twitter.com/MrRooni">Twitter</a> or <a href="https://alpha.app.net/mrrooni">App.net</a>, I&rsquo;m MrRooni on both.</p>

<p>And if you&rsquo;re the kind of person that likes gists, you can find the above code on GitHub here: <a href="https://gist.github.com/MrRooni/4988922">https://gist.github.com/MrRooni/4988922</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XIBs, Container Views, and Auto Layout (oh my)]]></title>
    <link href="https://mrrooni.com/fruitstandsoftware/blog/2012/07/11/xibs-container-views-and-auto-layout-oh-my/"/>
    <updated>2012-07-11T16:23:01-04:00</updated>
    <id>https://mrrooni.com/fruitstandsoftware/blog/2012/07/11/xibs-container-views-and-auto-layout-oh-my</id>
    <content type="html"><![CDATA[<p>While working on a major update for one of our products at <a href="http://nothirst.com/">No Thirst</a> I ran across a small implementation question: In the world of auto layout, if you have a window whose subviews are managed by view controllers, what is the best way to layout these subviews? In the realm of springs and struts the answer is pretty straightforward: You add container views to your window, define their autoresizing masks in the XIB, add your view controller views as subviews of the container views in code, and set their frame sizes to match their container view frame sizes. As long as you set the autoresizing masks of the view controller views to be <strong>NSViewHeightSizable | NSViewWidthSizable</strong> in their XIBs you get the behavior you&rsquo;re expecting and the code is pretty minimal.</p>

<p>[caption id=&ldquo;attachment_605&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;513&rdquo;]<a href="http://www.fruitstandsoftware.com/blog/wp-content/uploads/2012/07/ShmetBencherWindow.png"><img src="/fruitstandsoftware/blog/uploads/2012/07/ShmetBencherWindow.png" alt="" /></a> This is the window we&rsquo;re trying to create[/caption]</p>

<p>If you try to follow a similar pattern while using auto layout and do most of your work in XIBs with very little code you hit a bit of a curve in the road. With springs and struts you set your autoresizing masks on individual views allowing you to define what each view controller&rsquo;s view should do when added to a super view. Layout constraints (instances of <a href="https://developer.apple.com/library/mac/#documentation/AppKit/Reference/NSLayoutConstraint_Class/NSLayoutConstraint/NSLayoutConstraint.html">NSLayoutConstraint</a>) define relationships <strong><em>between</em></strong> views. This means that in order to create a layout constraint between two views both views need to be present at the time the relationship is defined. Thinking I could outsmart the system I had what I thought was a eureka moment. &ldquo;Ah ha!&rdquo; I thought, &ldquo;I&rsquo;ll follow the same pattern of using container views, but in each view controller&rsquo;s awakeFromNib I&rsquo;ll set up some constraints that mimic NSViewHeightSizable | NSViewWidthSizable. I&rsquo;m a GENIUS!&rdquo;</p>

<p>```objective-c</p>

<pre><code>- (void)awakeFromNib
{
    NSDictionary *viewsDictionary = @{ @"view":self.view };

    NSArray *horizontalMaximizingConstraints = [NSLayoutConstraint constraintsWithVisualFormat:@"|[view]|"
                                                                                       options:0
                                                                                       metrics:nil
                                                                                         views:viewsDictionary];

    NSArray *verticalMaximizingConstraints = [NSLayoutConstraint constraintsWithVisualFormat:@"V:|[view]|"
                                                                                     options:0
                                                                                     metrics:nil
                                                                                       views:viewsDictionary];
    [self.view addConstraints:horizontalMaximizingConstraints];
    [self.view addConstraints:verticalMaximizingConstraints];
}
</code></pre>

<p>```</p>

<p>Uh, yeah, not so much:</p>

<pre><code>2012-07-11 14:02:07.339 Shmet Bencher[15158:303] *** Terminating app due to uncaught
exception 'NSInvalidArgumentException', reason: 'Unable to parse constraint format:
Unable to interpret '|' character, because the related view doesn't have a superview
|[view]|
       ^'
</code></pre>

<p>Apparently there was a reason interface builder wouldn’t let me define those constraints visually.</p>

<h2>Possible Solutions</h2>

<p>As far as I can see there are two possible solutions to the original question:</p>

<ol>
<li><p> Follow the container view pattern. In your XIB you define the relationships between the container views and then in code you add your view controller views to those container views and set up constraints similar to the ones I posted above. The difference being that the | character will now represent a super view that actually exists.</p></li>
<li><p> Skip container views, leave your XIB alone, add all your view controller views as direct subviews of the window and then define the relationships between them.</p></li>
</ol>


<p>Option 1 is great because working with auto layout in interface builder allows you to see the immediate results of changing constraints. However, interface builder will also inject constraints into your layout as you&rsquo;re working to try and make sure you don&rsquo;t end up with an ambiguous layout or unsatisfiable constraints. Option 1 is also nice because the code you end up writing to add the view controller views to their containers essentially becomes boilerplate. Yes, there is a lot of it, but because of the nature of it, it&rsquo;s easy to see when you&rsquo;ve made a mistake.</p>

<p>Option 2 is great because you&rsquo;ve reduced your view hierarchy and the constraints associated with each view were put there by you without interface builder getting in the way. Option 2 does suffer from the annoying side effects of having to write more code and not allowing you to play with your window size to see how constraints react until you&rsquo;ve created a set of constraints that properly defines the layout for the entire window.</p>

<p>So what&rsquo;s the answer?</p>

<h2>The Answer</h2>

<p>The answer, of course, is, &ldquo;it depends&rdquo;. According to Apple you should define your constraints using these methods, in descending order of preference:</p>

<ul>
<li><p>Within interface builder</p></li>
<li><p>Using the visual format language in code (as I did above)</p></li>
<li><p>Individually using the <strong>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:</strong> class method on NSLayoutConstraint</p></li>
</ul>


<p>In this particular case I&rsquo;m going to charge forward with Option 2 and I will update this post if that turns out to be a horrible idea. If I had a mixture of other elements in this window like labels or other buttons I&rsquo;d probably go for Option 1 but since it&rsquo;s just views, and only a handful of them at that, I&rsquo;m going to code it. However, for all of the view controller views I will be doing their layout in interface builder.</p>

<p>If you&rsquo;ve got some feedback, typos to point out, or just want to type obscenities at me, you should get in touch with me via Twitter: <a href="http://twitter.com/MrRooni">@MrRooni</a></p>

<p>If any of the information above is misinformed or just plain wrong definitely get in touch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Etched” appearance labels by Mike Abdullah]]></title>
    <link href="https://mrrooni.com/fruitstandsoftware/blog/2012/05/30/etched-appearance-labels-by-mike-abdullah/"/>
    <updated>2012-05-30T10:57:49-04:00</updated>
    <id>https://mrrooni.com/fruitstandsoftware/blog/2012/05/30/etched-appearance-labels-by-mike-abdullah</id>
    <content type="html"><![CDATA[<p>My friend Mike has come up with another gem of a tip, head on over to his blog to see how easy it is to create NSTextFields with an etched appearance: <a href="http://www.mikeabdullah.net/NSBackgroundStyleRaised.html">“Etched” appearance labels</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Drawing Using drawRect, Part 1]]></title>
    <link href="https://mrrooni.com/fruitstandsoftware/blog/2009/12/18/custom-drawing-using-drawrect-part-1/"/>
    <updated>2009-12-18T21:01:28-05:00</updated>
    <id>https://mrrooni.com/fruitstandsoftware/blog/2009/12/18/custom-drawing-using-drawrect-part-1</id>
    <content type="html"><![CDATA[<p>One of the more advanced techniques for creating custom user interfaces on the Mac is the use of NSView&rsquo;s drawRect method.  Many answers to questions on StackOverflow and Apple&rsquo;s mailing lists include recommendations to &ldquo;just override drawRect and do the drawing yourself&rdquo;.  Some folks see this recommendation and their eyes glaze over, thinking that it&rsquo;s too advanced of a technique for them to wrap their heads around.  Over the next few days I&rsquo;m going to go over some basic techniques that can yield powerful results.</p>

<p>Let&rsquo;s start by setting up the Xcode project that will be the basis of the rest of these posts.</p>

<ul>
<li><p>Open Xcode and create a new Cocoa Application project called DrawingSample.</p></li>
<li><p>Create a new NSView subclass called CustomDrawingView.</p></li>
<li><p>Open MainMenu.xib, add a new Custom View to the Main Window, set its class to be CustomDrawingView, and set it&rsquo;s autosizing flags as seen here:</p></li>
</ul>


<p><a href="https://mrrooni.com/fruitstandsoftware/blog/wp-content/uploads/2009/12/Screen-shot-2009-12-18-at-8.14.10-PM.png"><img src="https://mrrooni.com/fruitstandsoftware/blog/wp-content/uploads/2009/12/Screen-shot-2009-12-18-at-8.14.10-PM.png" alt="DrawingSample IB Layout" /></a></p>

<p>Save and Quit Interface Builder and switch back to Xcode.  Open CustomDrawingView.m, it should look like so:</p>

<p>```objective-c</p>

<pre><code>@implementation CustomDrawingView

- (id)initWithFrame:(NSRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code here.
    }
    return self;
}

- (void)drawRect:(NSRect)dirtyRect {
    // Drawing code here.
}

@end
</code></pre>

<p>```</p>

<p>We&rsquo;re going to start (and finish) today with just a simple concept and some basic drawing that will set the stage for the future posts. All drawing in Cocoa is done by first setting up the environment in which you want to draw, and then doing the actual drawing. For instance, if we want to draw a blue box, we first have to setup the color blue, define the bounds of the box, and then draw it.  In this case we are using the NSRect that is passed to the drawRect method as the box we want to draw, and we setup the color blue by calling [[NSColor blueColor] set].  We then use the convenience method NSRectFill to fill the dirtyRect with the color blue.  Notice that we didn&rsquo;t pass the color to NSRectFill, we set it, and from then on anything we draw will be blue until we change the color.</p>

<p>You can think of drawing in Cocoa much the same way as you would think of painting with a brush.  You dip your brush in a certain paint color, paint the shape you want to paint, and then dip your brush in a new color and paint some more.</p>

<p>```objective-c</p>

<pre><code>- (void)drawRect:(NSRect)dirtyRect {
    [[NSColor blueColor] set];
    NSRectFill(dirtyRect);
}
</code></pre>

<p>```</p>

<p>The preceding code, when run, will generate a view that looks like this:</p>

<p><a href="https://mrrooni.com/fruitstandsoftware/blog/wp-content/uploads/2009/12/Screen-shot-2009-12-18-at-8.51.12-PM.png"><img src="https://mrrooni.com/fruitstandsoftware/blog/wp-content/uploads/2009/12/Screen-shot-2009-12-18-at-8.51.12-PM.png" alt="NSRectFill" /></a>Now, this may not look like much, but in future posts we will build on these concepts and, hopefully, by the end have drawn some pretty cool and useful things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your New Friends: Obj-C Associated Objects]]></title>
    <link href="https://mrrooni.com/fruitstandsoftware/blog/2009/08/28/your-new-friends-obj-c-associated-objects/"/>
    <updated>2009-08-28T12:32:58-04:00</updated>
    <id>https://mrrooni.com/fruitstandsoftware/blog/2009/08/28/your-new-friends-obj-c-associated-objects</id>
    <content type="html"><![CDATA[<p>Andy Matuschak has posted a little-known feature of the Objective-C API under Snow Leopard on his blog.  I can&rsquo;t think of a use for associated objects at the moment, but there&rsquo;s a good chance that I will need them in the future.  You can read about them at his blog: <a href="http://blog.andymatuschak.org/post/173646741/your-new-friends-obj-c-associated-objects">Square Signals : Your New Friends: Obj-C Associated Objects</a>.</p>
]]></content>
  </entry>
  
</feed>
