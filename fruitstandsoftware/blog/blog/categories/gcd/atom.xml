<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GCD | Core Fruition]]></title>
  <link href="https://mrrooni.com/fruitstandsoftware/blog/categories/gcd/atom.xml" rel="self"/>
  <link href="https://mrrooni.com/fruitstandsoftware/"/>
  <updated>2014-06-10T09:28:16-04:00</updated>
  <id>https://mrrooni.com/fruitstandsoftware/</id>
  <author>
    <name><![CDATA[Michael Fey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCD in Swift: It Just Works]]></title>
    <link href="https://mrrooni.com/fruitstandsoftware/blog/2014/06/09/gcd-in-swift-it-just-works/"/>
    <updated>2014-06-09T17:02:07-04:00</updated>
    <id>https://mrrooni.com/fruitstandsoftware/blog/2014/06/09/gcd-in-swift-it-just-works</id>
    <content type="html"><![CDATA[<p>With the awesome announcement of <a href="https://developer.apple.com/swift/">Swift</a> last week, alongside <a href="https://developer.apple.com/technologies/">all of the other incredible announcements,</a> I&rsquo;m sure that your reaction was similar to mine: Where do I begin?!</p>

<p>I&rsquo;ve been reading <a href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11">the book</a>, watching <a href="https://developer.apple.com/videos/wwdc/2014/">the sessions</a>, checking out <a href="https://developer.apple.com/library/prerelease/ios/navigation/">the sample code</a>, and basically trying to orient myself with the new syntax as much as possible.</p>

<p>One question I had today while listening to the latest episode of the <a href="http://www.imore.com/debug">Debug</a> podcast was, &ldquo;How will Grand Central Dispatch (GCD) work in Swift? Will GCD work in Swift?&rdquo; With that question in mind I settled in, opened Xcode, and chose File > New > Project&hellip;</p>

<p>I chose a <em>Single View Application</em> since I wouldn&rsquo;t need much of app to answer my question. I named it SwiftlyGCD and chose Swift as the language. I opened <code>ViewController.swift</code> and started typing out <code>dispatch</code> to see what would code-complete. Happily all of the wonderful GCD methods that we know and love appeared in the code-completion list in their Swift-equivalent notation.</p>

<p>For instance, <code>dispatch_async()</code> in Objective-C looks like so:</p>

<p><code>objective-c
void dispatch_async(dispatch_queue_t queue, dispatch_block_t block);
</code></p>

<p>Whereas in Swift it appears like this:</p>

<p><code>objective-c
func dispatch_async(queue: dispatch_queue_t!, block: dispatch_block_t!)
</code></p>

<p>As you can see we get a one for one translation from C to Swift thanks to Xcode 6. Additionally we get some extra niceties like named parameters. What does the code look like in usage?</p>

<p>```objective-c</p>

<pre><code>    dispatch_async(dispatch_get_main_queue(), {
        println("Currently dispatched asynchronously")
        })
</code></pre>

<p>```</p>

<p>The call to <code>dispatch_get_main_queue()</code> is exactly the same as we&rsquo;re used to, while the block syntax is simplified to just a pair of <code>{}</code>.</p>

<p>Bottom line: GCD is fully available in Swift and works exactly as we&rsquo;d expect. Way to go Apple!</p>

<p><strong>UPDATES</strong></p>

<p>After this post went live on Twitter <a href="http://twitter.com/jacobgorban/">Jacob Gorban</a> replied and said, <a href="http://twitter.com/jacobgorban/status/476353702857424897">&ldquo;It should even work with trailing block, no?&rdquo;</a></p>

<p>He&rsquo;s right! You can write the above dispatch like so:</p>

<p>```objective-c</p>

<pre><code>    dispatch_async(dispatch_get_main_queue()) {
        println("Currently dispatched asynchronously")
        }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
